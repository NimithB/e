Random Forrest Classifier Program
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
import pandas as pd
import numpy as np
# Load the Iris dataset
iris = datasets.load_iris()
# Display target names and feature names
print("Target Names:", iris.target_names)
print("Feature Names:", iris.feature_names)
# Prepare features and labels
X, y = datasets.load_iris(return_X_y=True)
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,
random_state=42)
# Create and train the Random Forest Classifier
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)
# Make predictions on the test set
y_pred = clf.predict(X_test)
# Calculate evaluation metrics
accuracy = metrics.accuracy_score(y_test, y_pred)
precision = metrics.precision_score(y_test, y_pred, average='weighted')
print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
# Predict for new input values
custom_inputs = np.array([
[5.1, 3.5, 1.4, 0.2], # Example input close to Iris-Setosa
[6.2, 3.4, 5.4, 2.3], # Example input close to Iris-Virginica
[5.9, 3.0, 4.2, 1.5] # Example input close to Iris-Versicolor
])
# Get predictions for custom inputs
custom_predictions = clf.predict(custom_inputs)
custom_species = [iris.target_names[pred] for pred in custom_predictions]
# Print predictions
print("\nCustom Predictions:")
for i, (input_data, species) in enumerate(zip(custom_inputs, custom_species), 1):
print(f"Input {i}: {input_data} -> Predicted Species: {species}")